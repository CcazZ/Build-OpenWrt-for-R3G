name: Build OpenWRT For Xiaomi Router 3G

on:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - 'r3g.config'
  schedule:
    - cron: 0 16 * * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: r3g.config
  DIY_SH: diy.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  TNAME: MI_R3G

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        集成DDNSto,项目地址：https://github.com/linkease/nas-packages
        echo >> feeds.conf.default
        echo 'src-git nas https://github.com/linkease/nas-packages.git;master' >> feeds.conf.default
        ./scripts/feeds update nas
        ./scripts/feeds install -a -p nas

    - name: Load custom configuration
      run: |
        cp -f $CONFIG_FILE openwrt/.config
        cp -f $DIY_SH openwrt/diy.sh
        cd openwrt
        chmod +x diy.sh
        sh diy.sh

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        rm -f version.buildinfo feeds.buildinfo sha256sums \
        *-squashfs-rootfs0.bin *-squashfs-kernel1.bin \
        *.manifest
        md5sum config.buildinfo >> md5.txt
        md5sum *-initramfs-kernel.bin >> md5.txt
        md5sum *-squashfs-sysupgrade.bin >> md5.txt
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_MI-R3G
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        cd ${FIRMWARE}
        zip -r OpenWrt_$TNAME.zip *
        curl -sL https://git.io/cowtransfer | sh
        ./cowtransfer-uploader -s -p 8 OpenWrt_$TNAME.zip
